name: Test clang-tidy-check Action

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-on-good-project:
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: [ ubuntu-latest macos-latest ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build tools
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update && \
            sudo apt-get install -y cmake ninja-build clang-18 || exit 1
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew update && \
            brew install cmake ninja llvm@18 || exit 1
          
            LLVM_BIN_PATH="$(brew --prefix llvm@18)/bin"
            printf "%s/\n" "$LLVM_BIN_PATH" >> $GITHUB_PATH
          else
            printf "Error: OS $RUNNER_OS is not supported\n"
            exit 1
          fi

      - name: Configure good project
        shell: bash
        run: |
          cd "test/good_project/"
          cmake -B build -S . -G Ninja -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_SCAN_FOR_MODULES=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy-check action on good project
        uses: ./
        with:
          compile-commands-path: "./test/good_project/build/compile_commands.json"

  test-on-poor-project:
    runs-on: "${{matrix.os}}"

    strategy:
      matrix:
        os: [ ubuntu-latest macos-latest ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build tools
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update && \
            sudo apt-get install -y cmake ninja-build clang-18 || exit 1
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew update && \
            brew install cmake ninja llvm@18 || exit 1
          
            LLVM_BIN_PATH="$(brew --prefix llvm@18)/bin"
            printf "%s/\n" "$LLVM_BIN_PATH" >> $GITHUB_PATH
          else
            printf "Error: OS $RUNNER_OS is not supported\n"
            exit 1
          fi

      - name: Configure poor project
        shell: bash
        run: |
          cd "test/poor_project/"
          cmake -B build -S . -G Ninja -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_SCAN_FOR_MODULES=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy-check action on poor project
        id: clang-tidy-check-poor-project
        uses: ./
        continue-on-error: true
        with:
          compile-commands-path: "./test/poor_project/build/compile_commands.json"

      - name: Verify last step fail
        shell: bash
        run: |
          if [ "${{steps.clang-tidy-check-poor-project.outcome}}" != "failure" ]; then
              printf "Error: expected clang-tidy-check-poor-project step to fail"
              exit 1
          fi