name: Test clang-tidy-check Action

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-on-good-project:
    runs-on: "${{matrix.os}}"

    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04 ]
        clang-tidy-version: [ 14, 16, 18 ]

        exclude:
          - os: ubuntu-22.04
            clang-tidy-version: 16
          - os: ubuntu-22.04
            clang-tidy-version: 18

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install cmake, ninja and clang
        uses: ./.github/actions/install-build-tools

      - name: Configure good project
        shell: bash
        run: |
          cd "test/good_project/"
          cmake -B build -S . -G Ninja -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_SCAN_FOR_MODULES=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy-check action on good project
        uses: ./
        with:
          version: "${{matrix.clang-tidy-version}}"
          compile-commands-path: "./test/good_project/build/compile_commands.json"
          warnings-as-errors: '*'

  test-on-poor-project:
    runs-on: "${{matrix.os}}"

    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04 ]
        clang-tidy-version: [ 14, 16, 18 ]

        exclude:
          - os: ubuntu-22.04
            clang-tidy-version: 16
          - os: ubuntu-22.04
            clang-tidy-version: 18

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install cmake, ninja and clang
        uses: ./.github/actions/install-build-tools

      - name: Configure poor project
        shell: bash
        run: |
          cd "test/poor_project/"
          cmake -B build -S . -G Ninja -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_SCAN_FOR_MODULES=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy-check action on poor project
        id: clang-tidy-check-poor-project
        uses: ./
        continue-on-error: true
        with:
          version: "${{matrix.clang-tidy-version}}"
          compile-commands-path: "./test/poor_project/build/compile_commands.json"
          warnings-as-errors: '*'

      - name: Verify last step fail
        shell: bash
        run: |
          if [ "${{steps.clang-tidy-check-poor-project.outcome}}" != "failure" ]; then
              printf "Error: expected previous step to fail.\n"
              exit 1
          fi